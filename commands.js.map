{"version":3,"file":"commands.js","mappings":"AAOAA,OAAOC,SAAQ,WAEZC,QAAQC,IAAI,iBACf,IAsGIH,OAAOI,QAAQC,WAAaL,OAAOM,aAAaC,IAAiC,MAA3BP,OAAOI,QAAQC,UACvEL,OAAOQ,QAAQC,UAAU,8BA1B3B,SAAoCC,IAMpC,SAAoBA,GAClBV,OAAOI,QAAQO,QAAQC,KAAKC,QAAQC,SAClC,gCACA,CACEC,aAAcL,IAEhB,SAAUM,GAEJA,EAAYC,SAAWjB,OAAOkB,kBAAkBC,WAClDjB,QAAQkB,MAAM,0BAA4BC,KAAKC,UAAUN,EAAYI,QAIvEJ,EAAYD,aAAaQ,WAC3B,GACJ,CApBEC,CAAWd,EACb","sources":["webpack://office-addin-taskpane-react/./src/commands/commands.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n   console.log(\"commands ready\");\n});\n\n// /**\n//  * Shows a notification when the add-in command is executed.\n//  * @param event\n//  */\n// function action(event: Office.AddinCommands.Event) {\n//   const message: Office.NotificationMessageDetails = {\n//     type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n//     message: \"Performed action.\",\n//     icon: \"Icon.80x80\",\n//     persistent: true,\n//   };\n\n//   // Show a notification message\n//   Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n//   // Be sure to indicate when the add-in command function is complete\n//   event.completed();\n// }\n\n// function getGlobal() {\n//   return typeof self !== \"undefined\"\n//     ? self\n//     : typeof window !== \"undefined\"\n//     ? window\n//     : typeof global !== \"undefined\"\n//     ? global\n//     : undefined;\n// }\n\n// const g = getGlobal() as any;\n\n// // The add-in command functions need to be available in global scope\n// g.action = action;\n\n/**\n//  * Method that fires when an attachment is being added or removed from the compose email or appointment\n//  * @param {Office.AsyncResult} event default: Office.AsyncResult\n//  */\n// function onItemAttachmentsChangedHandler(event: Office.AttachmentsChangedEventArgs) {\n//   if (Office.context.platform !== Office.PlatformType.OfficeOnline) {\n//     console.warn(\n//       `onItemAttachmentsChangedHandler(): Unsupported platform for encrypting/decrypting attachments (${Office.context.platform}); leaving...`\n//     );        \n//     //event.completed();\n//     return;\n//   }\n\n//   if (event.attachmentStatus === \"removed\"){\n//     console.log(\"onItemAttachmentsChangedHandler(): Not processing removed attachments; leaving...\");\n//     //event.completed(); //NOTE: Must call!\n//     return;\n//   }\n\n//   console.log(\n//     `onItemAttachmentsChangedHandler(): ${(event.attachmentDetails[0] as any).name} (${event.attachmentStatus})`\n//   );\n  \n  //   if (event.attachmentDetails.name == `${decryptedAttachmentPrefix}${fileName}`) {\n  //   //Don't process any more events - we've already encrypted the attachment and added it as another attachment, then decrypted that attachment and added it as well\n  //   event.completed(); //NOTE: Must call!\n  //   return;\n  // }\n  // if (fileName !== undefined){\n  //   console.log(\"onItemAttachmentsChangedHandler(): Skipping processing of further attachments - demo is done!\");\n  //   event.completed(); //NOTE: Must call!\n  //   return;\n  // }\n\n  // //Process the first attachment. We'll encrypt it and add it as another attachment, then decrypt that attachment and add it as well\n  // fileName = event.attachmentDetails.name;\n  // var item = Office.context.mailbox.item;\n  // var options = { asyncContext: { currentItem: item, callingEvent: event } };\n  // item.getAttachmentsAsync(options, getAttachmentsCallback);\n//}\n\nfunction onNewMessageComposeHandler(event: any) {\n  setSubject(event);\n}\n// function onNewAppointmentComposeHandler(event) {\n//   setSubject(event);\n// }\nfunction setSubject(event: any) {\n  Office.context.mailbox.item.subject.setAsync(\n    \"Set by an event-based add-in!\",\n    {\n      asyncContext: event,\n    },\n    function (asyncResult) {\n      // Handle success or error.\n      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {\n        console.error(\"Failed to set subject: \" + JSON.stringify(asyncResult.error));\n      }\n\n      // Call event.completed() after all work is done.\n      asyncResult.asyncContext.completed();\n    });\n}\n\n// IMPORTANT: To ensure your add-in is supported in the Outlook client on Windows, remember to map the event handler name specified in the manifest's LaunchEvent element to its JavaScript counterpart.\n// 1st parameter: FunctionName of LaunchEvent in the manifest; 2nd parameter: Its implementation in this .js file.\nif (Office.context.platform === Office.PlatformType.PC || Office.context.platform == null) {\n  Office.actions.associate(\"onNewMessageComposeHandler\", onNewMessageComposeHandler);\n  // Office.actions.associate(\"onNewAppointmentComposeHandler\", onNewAppointmentComposeHandler);\n}\n"],"names":["Office","onReady","console","log","context","platform","PlatformType","PC","actions","associate","event","mailbox","item","subject","setAsync","asyncContext","asyncResult","status","AsyncResultStatus","Succeeded","error","JSON","stringify","completed","setSubject"],"sourceRoot":""}